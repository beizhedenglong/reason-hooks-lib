// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var State$ReasonHooksLib = require("../src/State.bs.js");
var ReactHooks = require("@testing-library/react-hooks");

Jest.describe("useCounter", (function (param) {
        var container = ReactHooks.renderHook((function (param) {
                return State$ReasonHooksLib.useCounter(0);
              }), undefined);
        Jest.test("counter is 0", (function (param) {
                return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](container.result.current[/* counter */0]));
              }));
        Jest.test("counter is 1", (function (param) {
                ReactHooks.act((function () {
                        return Curry._1(container.result.current[/* set */1], (function (prev) {
                                      return prev + 1 | 0;
                                    }));
                      }));
                return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](container.result.current[/* counter */0]));
              }));
        return Jest.test("counter is 2", (function (param) {
                      ReactHooks.act((function () {
                              return Curry._1(container.result.current[/* set */1], (function (prev) {
                                            return prev + 1 | 0;
                                          }));
                            }));
                      return Jest.Expect[/* toEqual */12](2, Jest.Expect[/* expect */0](container.result.current[/* counter */0]));
                    }));
      }));

Jest.describe("useUndo", (function (param) {
        var result = ReactHooks.renderHook((function (param) {
                return State$ReasonHooksLib.useUndo(0);
              }), undefined).result;
        Jest.test("(past, present, future) equals ([], 0, [])", (function (param) {
                var current = result.current;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            /* [] */0,
                            0,
                            /* [] */0
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                current[/* past */3],
                                current[/* present */4],
                                current[/* future */5]
                              ]));
              }));
        Jest.test("(past, present, future) equals ([0], 1, [])", (function (param) {
                ReactHooks.act((function () {
                        return Curry._1(result.current[/* set */2], (function (prev) {
                                      return prev + 1 | 0;
                                    }));
                      }));
                var current = result.current;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            /* :: */[
                              0,
                              /* [] */0
                            ],
                            1,
                            /* [] */0
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                current[/* past */3],
                                current[/* present */4],
                                current[/* future */5]
                              ]));
              }));
        Jest.test("(past, present, future) equals ([0, 1], 2, [])", (function (param) {
                ReactHooks.act((function () {
                        return Curry._1(result.current[/* set */2], (function (prev) {
                                      return prev + 1 | 0;
                                    }));
                      }));
                var current = result.current;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            /* :: */[
                              0,
                              /* :: */[
                                1,
                                /* [] */0
                              ]
                            ],
                            2,
                            /* [] */0
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                current[/* past */3],
                                current[/* present */4],
                                current[/* future */5]
                              ]));
              }));
        Jest.test("undo: (past, present, future) equals ([0], 1, [2])", (function (param) {
                ReactHooks.act((function () {
                        return Curry._1(result.current[/* undo */0], /* () */0);
                      }));
                var current = result.current;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            /* :: */[
                              0,
                              /* [] */0
                            ],
                            1,
                            /* :: */[
                              2,
                              /* [] */0
                            ]
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                current[/* past */3],
                                current[/* present */4],
                                current[/* future */5]
                              ]));
              }));
        return Jest.test("redo: (past, present, future) equals ([0,1], 2, [])", (function (param) {
                      ReactHooks.act((function () {
                              return Curry._1(result.current[/* redo */1], /* () */0);
                            }));
                      var current = result.current;
                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                  /* :: */[
                                    0,
                                    /* :: */[
                                      1,
                                      /* [] */0
                                    ]
                                  ],
                                  2,
                                  /* [] */0
                                ], Jest.Expect[/* expect */0](/* tuple */[
                                      current[/* past */3],
                                      current[/* present */4],
                                      current[/* future */5]
                                    ]));
                    }));
      }));

Jest.describe("useToggle", (function (param) {
        var container = ReactHooks.renderHook((function (param) {
                return State$ReasonHooksLib.useToggle(false);
              }), undefined);
        Jest.test("on is false", (function (param) {
                return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](container.result.current[/* on */0]));
              }));
        return Jest.test("on is true", (function (param) {
                      ReactHooks.act((function () {
                              return Curry._1(container.result.current[/* toggle */2], /* () */0);
                            }));
                      return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](container.result.current[/* on */0]));
                    }));
      }));

Jest.describe("createGlobalState", (function (param) {
        var match = State$ReasonHooksLib.createGlobalStore(/* record */[
              /* name */"victor",
              /* age */21
            ]);
        var getState = match[/* getState */1];
        var useGlobalStore = match[/* useGlobalStore */0];
        var container = ReactHooks.renderHook((function (param) {
                return Curry._1(useGlobalStore, /* () */0);
              }), undefined);
        Jest.test("age is 21", (function (param) {
                var current = container.result.current;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            21,
                            21
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                Curry._1(getState, /* () */0)[/* age */1],
                                current[/* state */0][/* age */1]
                              ]));
              }));
        return Jest.test("age is 22", (function (param) {
                      ReactHooks.act((function () {
                              return Curry._1(container.result.current[/* set */1], (function (prev) {
                                            return /* record */[
                                                    /* name */prev[/* name */0],
                                                    /* age */prev[/* age */1] + 1 | 0
                                                  ];
                                          }));
                            }));
                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                  22,
                                  22
                                ], Jest.Expect[/* expect */0](/* tuple */[
                                      Curry._1(getState, /* () */0)[/* age */1],
                                      container.result.current[/* state */0][/* age */1]
                                    ]));
                    }));
      }));

/*  Not a pure module */
