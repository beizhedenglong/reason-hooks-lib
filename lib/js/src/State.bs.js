// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function useCounter(initial) {
  var match = React.useState((function () {
          return initial;
        }));
  var set = match[1];
  return /* record */[
          /* counter */match[0],
          /* set */set,
          /* reset */(function (param) {
              return Curry._1(set, (function (param) {
                            return initial;
                          }));
            }),
          /* inc */(function (param) {
              return Curry._1(set, (function (prev) {
                            return prev + 1 | 0;
                          }));
            }),
          /* dec */(function (param) {
              return Curry._1(set, (function (prev) {
                            return prev - 1 | 0;
                          }));
            })
        ];
}

function useUndo(initial) {
  var initialData = /* record */[
    /* past : [] */0,
    /* present */initial,
    /* future : [] */0
  ];
  var match = React.useState((function () {
          return initialData;
        }));
  var setState = match[1];
  var state = match[0];
  var undo = function (param) {
    return Curry._1(setState, (function (prevState) {
                  var match = List.rev(prevState[/* past */0]);
                  if (match) {
                    return /* record */[
                            /* past */List.rev(match[1]),
                            /* present */match[0],
                            /* future : :: */[
                              prevState[/* present */1],
                              prevState[/* future */2]
                            ]
                          ];
                  } else {
                    return prevState;
                  }
                }));
  };
  var set = function (f) {
    return Curry._1(setState, (function (param) {
                  var present = param[/* present */1];
                  return /* record */[
                          /* past */Pervasives.$at(param[/* past */0], /* :: */[
                                present,
                                /* [] */0
                              ]),
                          /* present */Curry._1(f, present),
                          /* future : [] */0
                        ];
                }));
  };
  var redo = function (param) {
    return Curry._1(setState, (function (prevState) {
                  var match = prevState[/* future */2];
                  if (match) {
                    return /* record */[
                            /* past */Pervasives.$at(prevState[/* past */0], /* :: */[
                                  prevState[/* present */1],
                                  /* [] */0
                                ]),
                            /* present */match[0],
                            /* future */match[1]
                          ];
                  } else {
                    return prevState;
                  }
                }));
  };
  return /* record */[
          /* undo */undo,
          /* redo */redo,
          /* set */set,
          /* past */state[/* past */0],
          /* present */state[/* present */1],
          /* future */state[/* future */2]
        ];
}

function useToggle(initial) {
  var match = React.useState((function () {
          return initial;
        }));
  var set = match[1];
  return /* record */[
          /* on */match[0],
          /* reset */(function (param) {
              return Curry._1(set, (function (param) {
                            return initial;
                          }));
            }),
          /* toggle */(function (param) {
              return Curry._1(set, (function (prev) {
                            return !prev;
                          }));
            }),
          /* set */set
        ];
}

function createGlobalStore(initial) {
  var state = /* record */[/* contents */initial];
  var listeners = /* record */[/* contents : [] */0];
  var setState = function (updater) {
    state[0] = Curry._1(updater, state[0]);
    return List.iter((function (f) {
                  return Curry._1(f, (function (param) {
                                return state[0];
                              }));
                }), listeners[0]);
  };
  var useGlobalStore = function (param) {
    var match = React.useState((function () {
            return state[0];
          }));
    var set = match[1];
    React.useEffect((function () {
            listeners[0] = /* :: */[
              set,
              listeners[0]
            ];
            return (function (param) {
                      listeners[0] = List.filter((function (f) {
                                return f !== set;
                              }))(listeners[0]);
                      return /* () */0;
                    });
          }), /* array */[]);
    return /* record */[
            /* state */match[0],
            /* set */setState
          ];
  };
  return /* record */[
          /* useGlobalStore */useGlobalStore,
          /* getState */(function (param) {
              return state[0];
            })
        ];
}

exports.useCounter = useCounter;
exports.useUndo = useUndo;
exports.useToggle = useToggle;
exports.createGlobalStore = createGlobalStore;
/* react Not a pure module */
